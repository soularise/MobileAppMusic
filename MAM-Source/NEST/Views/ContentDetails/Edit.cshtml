@model NEST.Models.ContentBody

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>



@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>ContentBody</legend>

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.SortOrder)
        @Html.HiddenFor(model => model.Icon)
        <div id="leftEditContainer">

        <div class="editor-label">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>
 
        <div class="editor-label">
            Title Size
        </div>
        <div class="editor-field">
            <select name="TitleSize">
            @if (Model.TitleSize == "")
            { 
                    <option value="12">Small</option>
                    <option value="14">Normal</option>
                    <option value="16" selected="selected">Large</option>
                    <option value="18">Very Large</option>
            }
            else
            {
                var smallselected = "";
                var normalselected = "";
                var largeselected = "";
                var xlargeselected = "";
                
                
                switch (Model.TitleSize)
                 {
                     case "12":
                         smallselected= "selected";
                         break;
                     case "14":
                         normalselected = "selected";
                         break;
                     case "16":
                         largeselected = "selected";
                         break;
                     case "18":
                         xlargeselected = "selected";
                         break;                       
                     default:
                         normalselected = "selected";
                         break;
                 }
                    <option value="12" @smallselected>Small</option>
                    <option value="14" @normalselected>Normal</option>
                    <option value="16" @largeselected>Large</option>
                    <option value="18" @xlargeselected>Very Large</option>
            }
            </select>
        </div>

        <input type="hidden" name="Type" value="1" />
        <div class="editor-label">
            Sub Header
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.SubHeader)
            @Html.ValidationMessageFor(model => model.SubHeader)
        </div>
        <div class="editor-label">
            SubHeader Size
        </div>
        <div class="editor-field">
            <select name="SubHeader">
            @if (Model.SubHeaderSize == "")
            { 
                    <option value="12">Small</option>
                    <option value="14" selected="selected">Normal</option>
                    <option value="16">Large</option>
                    <option value="18">Very Large</option>
            }
            else
            {
                var smallselected = "";
                var normalselected = "";
                var largeselected = "";
                var xlargeselected = "";


                switch (Model.SubHeaderSize)
                 {
                     case "12":
                         smallselected= "selected";
                         break;
                     case "14":
                         normalselected = "selected";
                         break;
                     case "16":
                         largeselected = "selected";
                         break;
                     case "18":
                         xlargeselected = "selected";
                         break;                       
                     default:
                         normalselected = "selected";
                         break;
                 }
                    <option value="12" @smallselected>Small</option>
                    <option value="14" @normalselected>Normal</option>
                    <option value="16" @largeselected>Large</option>
                    <option value="18" @xlargeselected>Very Large</option>
            }
            </select>
        </div>
        <div class="editor-label">
            Promote To Home Page
        </div>
        <div class="editor-field">
        @if (Model.Promote == "Y")
        { 
            <input id="PromoteY" type="checkbox" name="Promote" value="Y" checked />
        }
        else
        {
            <input id="PromoteY" type="checkbox" name="Promote" value="Y" />
        }
        </div>
            

        <div class="editor-label">
            Display Date
        </div>
        <div class="editor-field">

            <input type="text" id="datepicker" name="CreationDate" value="@Model.CreationDate" />
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Owner)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Owner)
            @Html.ValidationMessageFor(model => model.Owner)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Icon)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Icon)
            @Html.ValidationMessageFor(model => model.Icon)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ContentSection_ID, "Parent Content Section")
        </div>
        <div class="editor-field">
            @Html.DropDownList("ContentSection_ID", String.Empty)
            @Html.ValidationMessageFor(model => model.ContentSection_ID)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SEOUrl)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.SEOUrl)
            @Html.ValidationMessageFor(model => model.SEOUrl)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MediaSourceURL)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MediaSourceURL)
            @Html.ValidationMessageFor(model => model.MediaSourceURL)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.IFrameURL)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IFrameURL)
            @Html.ValidationMessageFor(model => model.IFrameURL)
        </div>

        <p>
            <input type="submit" value="Update" />
        </p>

        </div>

        <div id="rightEditContainer">  
        <div class="editor-label">
        <div class="editor-field">
        @if (Model.IncludePageHeader == "Y")
        { 
            <input id="IncludePageHeader" type="checkbox" name="IncludePageHeader" value="Y" checked />
        }
        else
        {
            <input id="IncludePageHeader" type="checkbox" name="IncludePageHeader" value="Y" />
        }
            Exclude page category header (ie: NEWS, CONTRIBUTION, etc.)
        </div>

        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BodyText)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.BodyText)
            @Html.ValidationMessageFor(model => model.BodyText)
         
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TeaserText)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.TeaserText)
            @Html.ValidationMessageFor(model => model.TeaserText)
         
        </div>
        </div>



    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "../ContentMaintenance/GetSectionItems", new { id = Model.ContentSection_ID })
</div>
